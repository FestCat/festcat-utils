#    Copyright (C) 2011  Sergio Oller <sergioller@gmail.com>
#
#    This library is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation; either
#    version 2.1 of the License, or (at your option) any later version.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with this library; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

# These functions can be heavily changed because the festcat-utils
# is not considered stable yet.
# If you want to use them, email me <sergioller@gmail.com> and
# I will standarize them more.

function init_entorn()
{
BINDIR="__BINDIR__"
SYSCONFDIR="__SYSCONFDIR__"
SOX="__SOX__"
PERL="__PERL__"
ICONV="__ICONV__"
FILE="__FILE__"
CSPLIT="__CSPLIT__"
DATADIR="__DATADIR__"
XCLIP="__XCLIP__"
WLPASTE="__WLPASTE__"
CAT="__CAT__"
MKDIR="__MKDIR__"
TR="__TR__"
RM="__RM__"
GREP="__GREP__"
ZENITY="__ZENITY__"
KILL="__KILL__"
FESTIVAL="__FESTIVAL__"
TEXT2WAVE="__TEXT2WAVE__"
ECHO="__ECHO__"
#WAIT ## bashism?
ID3="__ID3__"
VORBISCOMMENT="__VORBISCOMMENT__"
DATE="__DATE__"

AUDIOLLIBRE="${BINDIR}/audiollibre"
DIVCAPITOLS="${BINDIR}/divcapitols"
FESTCAT_BIN="${BINDIR}/festcat"
FESTCAT_LLEGEIX="${BINDIR}/festcat_llegeix"
READCLIPBOARD="${BINDIR}/readclipboard"
TEXT2AUDIO="${BINDIR}/text2audio"
VEU="${BINDIR}/veu"

# etc:
SYSCONF_CONFIG="${SYSCONFDIR}/festcat.conf"
if [ -d "${XDG_CONFIG_HOME}" ];then
   HOME_CONFIG="${XDG_CONFIG_HOME}/festcat/festcat.conf"
else
   HOME_CONFIG="${HOME}/.config/festcat/festcat.conf"
fi

FESTCAT_TMPDIR=${TMPDIR-/tmp/}
${MKDIR} -p $(dirname "$HOME_CONFIG")

carrega_config

}

function echoverb()
{
  if [ $verbose -gt $2 ];then
     ${ECHO} "$1"
  fi
}

function extensions_disponibles()
{
LANG=C ${SOX} -h | ${GREP} "AUDIO FILE FORMATS"
}

function usage_audiollibre()
{
${CAT} << EOF
Aquest script genera un audiollibre a partir d'un fitxer de text.
Ús:
$0 [-a autor] [-f ogg] fitxer.txt

Paràmetres:
 -t: Estableix el títol de l'audiollibre
 -a: Estableix l'etiqueta d'autor a l'audiollibre.
 -v: Tria la veu.
 -o: Estableix el directori de sortida de tots els fitxers d'àudio.
 -f: Extensió del fitxer de sortida [ogg]. Extensions disponibles:
EOF
extensions_disponibles
argdescription_divcapitols
${CAT} << EOF

 fitxer.txt: Nom del fitxer de text a separar en capítols.

EOF
}




function usage_divcapitols()
{
${CAT} << EOF
Aquest script separa un fitxer de text en diversos fitxers.
Està pensat per dividir un llibre en capítols.

Ús:
$0 [ ( -m 1|2|3|4 ) | ( -c REGEX ) ] [ -o dirsortida] fitxer.txt

Paràmetres:
EOF
argdescription_divcapitols
${CAT} << EOF
 -o: Directori de sortida dels capítols

 fitxer.txt: Nom del fitxer de text a separar en capítols.
EOF
}

function usage_festcat()
{
${ZENITY} --info --title="FestCat: Ajuda" --text="Ajuda no escrita encara, si tens dubtes usa el <a href=\"http://ubuntuforums.org/showthread.php?t=806060&amp;page=4\">fòrum</a>."
}

function argdescription_divcapitols()
{
${CAT} << EOF
 -m: Determina com es reconeixen els títols de capítols
    1: Els capítols comencen amb: "Capítol 1" (mode predefinit)
    2: Els capítols comencen només amb el nombre: "1"
    3: Format Projecte Gutemberg: "Capítol I"
    4: Format Manybooks: "I"
    5: Manuals (a): "1 Títol del capítol..." o "1. Títol del capítol..."

 -c: Especifica una expressió regular personalitzada per identificar l'inici dels capítols.
EOF
}


function usage_readclipboard()
{
${CAT} << EOF
Aquest script reprodueix el contingut del portarretalls.
Ús:
readclipboard [opcions]

Paràmetres:
 -v: Tria la veu.
EOF
}

function usage_festcat_llegeix()
{
${CAT} << EOF
Aquest script llegeix en veu alta el fitxer especificat.
Ús:
festcat_llegeix [opcions] [fitxer.txt]

Paràmetres:
 -v: Tria la veu.
 -V: Mostra informació de depuració.
 fitxer.txt: Fitxer a llegir. Si no s'especifica cap, s'espera l'entrada estàndard.
EOF
}


function setregex_divcapitols()
{
         case "$1" in
            1) 
               regex="/^Capítol /";;
            2) 
               regex="/^[0-9][0-9]*$/";;
            3) 
               regex="/^Capítol M{0,4}(CM|CD|D?C{0,4})(XC|XL|L?X{0,4})(IX|IV|V?I{0,4})$/";;
            4) 
               regex= "/^M{0,4}(CM|CD|D?C{0,4})(XC|XL|L?X{0,4})(IX|IV|V?I{0,4})$/";; # el {0,4} admet nombres com XXXX (tot i que no són correctes realment)
            5) 
               regex="/^[0-9][0-9]*\.?\s?[A-Za-z0-9]*/";;
            [?])
               echo "Aquest mode no està definit.";;
         esac
}


function usage_text2audio()
{
${CAT} << EOF
Aquest script sintetitza un fitxer de text en un fitxer d'àudio.
Ús:
$0 [ -a autor ] [-p pista] [-f format ] fitxer.txt

Paràmetres:
 -t: Estableix el títol del fitxer d'àudio.
 -a: Estableix l'autor del fitxer de text en les propietats del fitxer d'àudio.
 -p: Estableix el número de pista, útil per llibres.
 -o: Estableix el nom del fitxer de sortida.
 -f: Determina el format del fitxer de sortida. Extensions disponibles:
EOF
extensions_disponibles
${CAT} << EOF

 fitxer.txt: Fitxer a convertir
EOF
}


function valida_audio_ext()
{
local avalext=$( extensions_disponibles | tail -c +20)
if [[ "$avalext" =~ "$1" ]]; then
   return 0
fi
${CAT} << EOF
$0
ERROR:
Sembla que «$1» no és una extensió suportada.
Algun d'aquests paquets pot ser-vos útil:
libsox-fmt-all, libmp3lame0
Tingueu present que formats com «mp3» no són lliures i poden tenir patents a alguns països.
EOF
exit 1
}

function voice_exists()
{
local veu="$1"
${FESTIVAL} -b "(voice_${veu})"
}

function carrega_config()
{
if [ "$CONFIG_CARREGAT" = "1" ] ; then
   return
fi
DEFAULT_VOICE="upc_ca_ona_hts"

if [ -s "${SYSCONF_CONFIG}" ];then
   . "${SYSCONF_CONFIG}" || ( ${ECHO} "Error in \"${SYSCONF_CONFIG}\""; exit 1 )
fi

if [ -s "${HOME_CONFIG}" ];then
   . "${HOME_CONFIG}" || ( ${ECHO} "Error in \"${HOME_CONFIG}\""; exit 1 )
fi

voice_exists "${DEFAULT_VOICE}"
if [  "$?" -ne 0 ];then
   ${ECHO} "La veu $DEFAULT_VOICE no està disponible" 
   DEFAULT_VOICE=$(${FESTIVAL} -b '(print (car (voice.list)))')
   ${ECHO} "Usant la veu: $DEFAULT_VOICE"
fi
CONFIG_CARREGAT="1"

}

function es_textfile()
{
  local infile="$1"
  local mime
  mime=$( ${FILE} -ib "$infile" )

  if [[ ! "$mime" =~ "text" ]]; then
    ${ECHO} "$0: Cal indicar un fitxer de text."
    ${ECHO} "    S'ha trobat un fitxer de tipus $mime"
    $usage
    exit 1
  fi

}

function clean_file()
{
   local mymime
   local tmpfile="$1"
   local output=$(${CAT} "${tmpfile}")
   
   mymime=$(${FILE} -ib "${tmpfile}")
   if [[ "$mymime" =~ "charset=utf-8" ]]; then
      output=$(echo ${output} | ${ICONV} -f UTF-8 -t ISO-8859-15//TRANSLIT//IGNORE )
   fi
# Extra replacements TODO:
#       Oct   Dec   Description
#       ---------  --------------------------------------------
#       240   160   NO-BREAK SPACE
#       241   161   INVERTED EXCLAMATION MARK
#       242   162   CENT SIGN
#       243   163   POUND SIGN
#       244   164   EURO SIGN
#       245   165   YEN SIGN
#       246   166   LATIN CAPITAL LETTER S WITH CARON
#       247   167   SECTION SIGN
#       250   168   LATIN SMALL LETTER S WITH CARON
#       251   169   COPYRIGHT SIGN
#       252   170   FEMININE ORDINAL INDICATOR
#       253   171   LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
#       254   172   NOT SIGN
#       255   173   SOFT HYPHEN
#       256   174   REGISTERED SIGN
#                  
#       257   175   MACRON
#       260   176   DEGREE SIGN
#       261   177   PLUS-MINUS SIGN
#       262   178   SUPERSCRIPT TWO
#       263   179   SUPERSCRIPT THREE
#       264   180   LATIN CAPITAL LETTER Z WITH CARON
#       265   181   MICRO SIGN
#       266   182   PILCROW SIGN
#       267   183   MIDDLE DOT
#       270   184   LATIN SMALL LETTER Z WITH CARON
#       271   185   SUPERSCRIPT ONE
#       272   186   MASCULINE ORDINAL INDICATOR
#       273   187   RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK
#       274   188   LATIN CAPITAL LIGATURE OE
#       275   189   LATIN SMALL LIGATURE OE
#       276   190   LATIN CAPITAL LETTER Y WITH DIAERESIS
#       277   191   INVERTED QUESTION MARK
#       300   192   LATIN CAPITAL LETTER A WITH GRAVE
#       301   193   LATIN CAPITAL LETTER A WITH ACUTE
#       302   194   LATIN CAPITAL LETTER A WITH CIRCUMFLEX
#       303   195   LATIN CAPITAL LETTER A WITH TILDE
#       304   196   LATIN CAPITAL LETTER A WITH DIAERESIS
#       305   197   LATIN CAPITAL LETTER A WITH RING ABOVE
#       306   198   LATIN CAPITAL LETTER AE
#       307   199   LATIN CAPITAL LETTER C WITH CEDILLA
#       310   200   LATIN CAPITAL LETTER E WITH GRAVE
#       311   201   LATIN CAPITAL LETTER E WITH ACUTE
#       312   202   LATIN CAPITAL LETTER E WITH CIRCUMFLEX
#       313   203   LATIN CAPITAL LETTER E WITH DIAERESIS
#       314   204   LATIN CAPITAL LETTER I WITH GRAVE
#       315   205   LATIN CAPITAL LETTER I WITH ACUTE
#       316   206   LATIN CAPITAL LETTER I WITH CIRCUMFLEX
#       317   207   LATIN CAPITAL LETTER I WITH DIAERESIS
#       320   208   LATIN CAPITAL LETTER ETH
#       321   209   LATIN CAPITAL LETTER N WITH TILDE
#       322   210   LATIN CAPITAL LETTER O WITH GRAVE
#       323   211   LATIN CAPITAL LETTER O WITH ACUTE
#       324   212   LATIN CAPITAL LETTER O WITH CIRCUMFLEX
#       325   213   LATIN CAPITAL LETTER O WITH TILDE
#       326   214   LATIN CAPITAL LETTER O WITH DIAERESIS
#       327   215   MULTIPLICATION SIGN
#       330   216   LATIN CAPITAL LETTER O WITH STROKE
#       331   217   LATIN CAPITAL LETTER U WITH GRAVE
#       332   218   LATIN CAPITAL LETTER U WITH ACUTE
#       333   219   LATIN CAPITAL LETTER U WITH CIRCUMFLEX
#       334   220   LATIN CAPITAL LETTER U WITH DIAERESIS
#       335   221   LATIN CAPITAL LETTER Y WITH ACUTE
#       336   222   LATIN CAPITAL LETTER THORN
#       337   223   LATIN SMALL LETTER SHARP S
#       340   224   LATIN SMALL LETTER A WITH GRAVE
#       341   225   LATIN SMALL LETTER A WITH ACUTE
#       342   226   LATIN SMALL LETTER A WITH CIRCUMFLEX
#       343   227   LATIN SMALL LETTER A WITH TILDE
#       344   228   LATIN SMALL LETTER A WITH DIAERESIS
#       345   229   LATIN SMALL LETTER A WITH RING ABOVE
#       346   230   LATIN SMALL LETTER AE
#       347   231   LATIN SMALL LETTER C WITH CEDILLA
#       350   232   LATIN SMALL LETTER E WITH GRAVE
#       351   233   LATIN SMALL LETTER E WITH ACUTE
#       352   234   LATIN SMALL LETTER E WITH CIRCUMFLEX
#       353   235   LATIN SMALL LETTER E WITH DIAERESIS
#       354   236   LATIN SMALL LETTER I WITH GRAVE
#       355   237   LATIN SMALL LETTER I WITH ACUTE
#       356   238   LATIN SMALL LETTER I WITH CIRCUMFLEX
#       357   239   LATIN SMALL LETTER I WITH DIAERESIS
#                  
#       360   240      LATIN SMALL LETTER ETH
#       361   241   LATIN SMALL LETTER N WITH TILDE
#       362   242   LATIN SMALL LETTER O WITH GRAVE
#       363   243   LATIN SMALL LETTER O WITH ACUTE
#       364   244   LATIN SMALL LETTER O WITH CIRCUMFLEX
#       365   245   LATIN SMALL LETTER O WITH TILDE
#       366   246   LATIN SMALL LETTER O WITH DIAERESIS
#       367   247   DIVISION SIGN
#       370   248   LATIN SMALL LETTER O WITH STROKE
#       371   249   LATIN SMALL LETTER U WITH GRAVE
#       372   250   LATIN SMALL LETTER U WITH ACUTE
#       373   251   LATIN SMALL LETTER U WITH CIRCUMFLEX
#       374   252   LATIN SMALL LETTER U WITH DIAERESIS
#       375   253   LATIN SMALL LETTER Y WITH ACUTE
#       376   254   LATIN SMALL LETTER THORN
#       377   255   LATIN SMALL LETTER Y WITH DIAERESIS
   output=$(echo "${output}" | sed 's:":\\\":g')

   output=$( echo "${output}" |  ${TR} "\255\264\341\354\371" "-'\340\355\372" | \
              ${TR} -c  '\- \t\n\r[:alnum:]\341\340\351\350\355\354\363\362\372\371\374\357\347\361\301\300\311\310\315\314\323\322\332\331\334\317\307\321[]{}\272\252\\!|@"\267#\$~%&/()=?\047\277\241*+_.:,;<>\244' ' ' )

   ${ECHO} "${output}"
}


function clean_string()
{
   local tmpfile
   local output
   tmpfile="${FESTCAT_TMPDIR}/festcat_$$_$RANDOM.txt"
   ${ECHO} "$1" > ${tmpfile}
   output=$(clean_file "${tmpfile}")
   ${RM} ${tmpfile}
   ${ECHO} "${output}"
}

function llegeix()
{
   local text="$1"
   local veu="$2"
   if [ $# -eq 3 ]; then
     ${FESTIVAL} -b "(voice_$veu)" -b "(SayText \"${text}\")" &
   else
     ${FESTIVAL} -b "(voice_$veu)" -b "(SayText \"${text}\")"
   fi
}


function tria_veu()
{
local zen
local voices
local veutriada
local currvoice

# We create the home config file if it does not exist:
if [ ! -f "${HOME_CONFIG}" ]; then
   mkdir -p $(basename "${HOME_CONFIG}" ".conf")
   touch "${HOME_CONFIG}"
fi

# FIXME: This is not beautiful:
currvoice=$(cat "${HOME_CONFIG}" | sed -e '/DEFAULT_VOICE/!d' -e 's:^DEFAULT_VOICE="\(.*\)":\1:' )

voices=$(echo '(print (voice.list))' | festival | tr -d '()' | sed -e 's/voice_//g') 
zen=""
for v in $voices;do
  if [ "$v" = "$currvoice" ];then
    ${ECHO} "Current voice was: $v"
    zen="$zen TRUE $v"
  else
    zen="$zen FALSE $v"
  fi
done
veutriada=$(zenity --list --title "FestCat: Tria de veu" --text 'Trieu una veu per FestCat' --radiolist --column "Tria" --column "Veus disponibles" $zen)
if [ "$?" != 0 -o "$veutriada" = "" ]; then
   echo "Error al triar la veu"
   exit 1
fi

if [[ $(cat "${HOME_CONFIG}") =~ "^DEFAULT_VOICE" ]];then
   sed -i "s:^DEFAULT_VOICE=\"$currvoice\":DEFAULT_VOICE=\"${veutriada}\":g" "${HOME_CONFIG}"
else
    ${ECHO} "DEFAULT_VOICE=\"${veutriada}\"" >> "${HOME_CONFIG}"
    ${ECHO} >> "${HOME_CONFIG}"
fi

}
